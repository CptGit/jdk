/*Automatically generated by jog from patterns: 
ADD2,
ADD7.*/
package compiler.c2.irTests;

import jdk.test.lib.Asserts;
import compiler.lib.ir_framework.*;

/*@test
@library /test/lib /
@run driver compiler.c2.irTests.TestAddLNode*/
public class TestAddLNode {

    public static void main(String[] args) {
        TestFramework.run();
    }

    @Run(test = { "testADD2"/*, "testADD7"*/ })
    public void runMethod() {
        long a = RunInfo.getRandom().nextLong();
        long b = RunInfo.getRandom().nextLong();
        long c = RunInfo.getRandom().nextLong();
        long d = RunInfo.getRandom().nextLong();
        long min = Long.MIN_VALUE;
        long max = Long.MAX_VALUE;
        assertResult(0, 0, 0, 0);
        assertResult(a, b, c, d);
        assertResult(min, min, min, min);
        assertResult(max, max, max, max);
    }

    @DontCompile
    public void assertResult(long a, long b, long c, long d) {
        Asserts.assertEQ((a - b) + (c - d), testADD2(a, b, c, d));
        // Asserts.assertEQ((a - b) + (b - c), testADD7(a, b, c));
    }

    // Checks (a - b) + (c - d) => (a + c) - (b + d)
    @Test
    @IR(counts = { IRNode.ADD, "2", IRNode.SUB, "1" })
    public long testADD2(long a, long b, long c, long d) {
        return (a - b) + (c - d);
    }

    // // Checks (a - b) + (b - c) => a - c
    // @Test
    // @IR(failOn = { IRNode.ADD })
    // @IR(counts = { IRNode.SUB, "1" })
    // public long testADD7(long a, long b, long c) {
    //     return (a - b) + (b - c);
    // }
}
